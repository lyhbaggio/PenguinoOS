.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)syscall.2	8.1 (Berkeley) 6/16/93
.\"
.\"
.\" 2002-03-20  Christoph Hellwig <hch@infradead.org>
.\"	- adopted for Linux
.\"
.TH SYSCALL 2 2012-08-14 "Linux" "Linux Programmer's Manual"
.SH NAME
syscall \- indirect system call
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <unistd.h>
.BR "#include <sys/syscall.h>   "  "/* For SYS_xxx definitions */"

.BI "int syscall(int " number ", ...);"
.fi
.SH DESCRIPTION
.BR syscall ()
is a small library function that invokes
the system call whose assembly language
interface has the specified
.I number
with the specified arguments.
Employing
.BR syscall ()
is useful, for example,
when invoking a system call that has no wrapper function in the C library.

.BR syscall ()
saves CPU registers before making the system call,
restores the registers upon return from the system call,
and stores any error code returned by the system call in
.BR errno (3)
if an error occurs.

Symbolic constants for system call numbers can be found in the header file
.IR <sys/syscall.h> .
.SH RETURN VALUE
The return value is defined by the system call being invoked.
In general, a 0 return value indicates success.
A \-1 return value indicates an error,
and an error code is stored in
.IR errno .
.SH NOTES
.BR syscall ()
first appeared in
4BSD.
.SH EXAMPLE
.nf
#define _GNU_SOURCE
#include <unistd.h>
#include <sys/syscall.h>
#include <sys/types.h>

int
main(int argc, char *argv[])
{
    pid_t tid;

    tid = syscall(SYS_gettid);
    tid = syscall(SYS_tgkill, getpid(), tid);
}
.fi
.SH SEE ALSO
.BR _syscall (2),
.BR intro (2),
.BR syscalls (2)
